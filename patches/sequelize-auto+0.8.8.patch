diff --git a/node_modules/sequelize-auto/lib/auto-generator.js b/node_modules/sequelize-auto/lib/auto-generator.js
index 72effbd..7caa5c7 100644
--- a/node_modules/sequelize-auto/lib/auto-generator.js
+++ b/node_modules/sequelize-auto/lib/auto-generator.js
@@ -147,20 +147,20 @@ class AutoGenerator {
         // trim off last ",\n"
         str = str.substring(0, str.length - 2) + "\n";
         // add the table options
-        str += space[1] + "}, {\n";
+        str += space[2] + "}, {\n";
         if (!this.options.useDefine) {
-            str += space[2] + "sequelize,\n";
+            str += space[3] + "sequelize,\n";
         }
-        str += space[2] + "tableName: '" + tableNameOrig + "',\n";
+        str += space[3] + "tableName: '" + tableNameOrig + "',\n";
         if (schemaName && this.dialect.hasSchema) {
-            str += space[2] + "schema: '" + schemaName + "',\n";
+            str += space[3] + "schema: '" + schemaName + "',\n";
         }
         if (this.hasTriggerTables[table]) {
-            str += space[2] + "hasTrigger: true,\n";
+            str += space[3] + "hasTrigger: true,\n";
         }
-        str += space[2] + "timestamps: " + timestamps + ",\n";
+        str += space[3] + "timestamps: " + timestamps + ",\n";
         if (paranoid) {
-            str += space[2] + "paranoid: true,\n";
+            str += space[3] + "paranoid: true,\n";
         }
         // conditionally add additional options
         const hasadditional = lodash_1.default.isObject(this.options.additional) && lodash_1.default.keys(this.options.additional).length > 0;
@@ -168,17 +168,17 @@ class AutoGenerator {
             lodash_1.default.each(this.options.additional, (value, key) => {
                 if (key === 'name') {
                     // name: true - preserve table name always
-                    str += space[2] + "name: {\n";
-                    str += space[3] + "singular: '" + table + "',\n";
-                    str += space[3] + "plural: '" + table + "'\n";
-                    str += space[2] + "},\n";
+                    str += space[3] + "name: {\n";
+                    str += space[4] + "singular: '" + table + "',\n";
+                    str += space[4] + "plural: '" + table + "'\n";
+                    str += space[3] + "},\n";
                 }
                 else if (key === "timestamps" || key === "paranoid") {
                     // handled above
                 }
                 else {
                     value = lodash_1.default.isBoolean(value) ? value : ("'" + value + "'");
-                    str += space[2] + key + ": " + value + ",\n";
+                    str += space[3] + key + ": " + value + ",\n";
                 }
             });
         }
@@ -186,17 +186,21 @@ class AutoGenerator {
         if (!this.options.noIndexes) {
             str += this.addIndexes(table);
         }
-        str = space[2] + str.trim();
+        str = space[3] + str.trim();
         str = str.substring(0, str.length - 1);
-        str += "\n" + space[1] + "}";
+        str += "\n" + space[2] + "}";
         return str;
     }
     // Create a string containing field attributes (type, defaultValue, etc.)
     addField(table, field) {
         // ignore Sequelize standard fields
         const additional = this.options.additional;
-        if (additional && (additional.timestamps !== false) && (this.isTimestampField(field) || this.isParanoidField(field))) {
-            return '';
+        // if (additional && (additional.timestamps !== false) && (this.isTimestampField(field) || this.isParanoidField(field))) {
+        //     return '';
+        // }
+        if (additional && (additional.timestamps !== false) && this.isTimestampField(field)) {
+            const fieldName = (0, types_1.recase)(this.options.caseProp, field);
+            return this.space[3] + this.quoteName(fieldName) + ": DataTypes.DATE,\n";
         }
         if (this.isIgnoredField(field)) {
             return '';
@@ -223,20 +227,20 @@ class AutoGenerator {
                 return true;
             }
             if (isSerialKey && !wroteAutoIncrement) {
-                str += space[3] + "autoIncrement: true,\n";
+                str += space[4] + "autoIncrement: true,\n";
                 // Resort to Postgres' GENERATED BY DEFAULT AS IDENTITY instead of SERIAL
                 if (this.dialect.name === "postgres" && fieldObj.foreignKey && fieldObj.foreignKey.isPrimaryKey === true &&
                     (fieldObj.foreignKey.generation === "ALWAYS" || fieldObj.foreignKey.generation === "BY DEFAULT")) {
-                    str += space[3] + "autoIncrementIdentity: true,\n";
+                    str += space[4] + "autoIncrementIdentity: true,\n";
                 }
                 wroteAutoIncrement = true;
             }
             if (attr === "foreignKey") {
                 if (foreignKey && foreignKey.isForeignKey) {
-                    str += space[3] + "references: {\n";
-                    str += space[4] + "model: \'" + fieldObj[attr].foreignSources.target_table + "\',\n";
-                    str += space[4] + "key: \'" + fieldObj[attr].foreignSources.target_column + "\'\n";
-                    str += space[3] + "}";
+                    str += space[4] + "references: {\n";
+                    str += space[5] + "model: \'" + fieldObj[attr].foreignSources.target_table + "\',\n";
+                    str += space[5] + "key: \'" + fieldObj[attr].foreignSources.target_column + "\'\n";
+                    str += space[4] + "}";
                 }
                 else {
                     return true;
@@ -248,7 +252,7 @@ class AutoGenerator {
             }
             else if (attr === "primaryKey") {
                 if (fieldObj[attr] === true && (!lodash_1.default.has(fieldObj, 'foreignKey') || !!fieldObj.foreignKey.isPrimaryKey)) {
-                    str += space[3] + "primaryKey: true";
+                    str += space[4] + "primaryKey: true";
                 }
                 else {
                     return true;
@@ -256,17 +260,17 @@ class AutoGenerator {
             }
             else if (attr === "autoIncrement") {
                 if (fieldObj[attr] === true && !wroteAutoIncrement) {
-                    str += space[3] + "autoIncrement: true,\n";
+                    str += space[4] + "autoIncrement: true,\n";
                     // Resort to Postgres' GENERATED BY DEFAULT AS IDENTITY instead of SERIAL
                     if (this.dialect.name === "postgres" && fieldObj.foreignKey && fieldObj.foreignKey.isPrimaryKey === true && (fieldObj.foreignKey.generation === "ALWAYS" || fieldObj.foreignKey.generation === "BY DEFAULT")) {
-                        str += space[3] + "autoIncrementIdentity: true,\n";
+                        str += space[4] + "autoIncrementIdentity: true,\n";
                     }
                     wroteAutoIncrement = true;
                 }
                 return true;
             }
             else if (attr === "allowNull") {
-                str += space[3] + attr + ": " + fieldObj[attr];
+                str += space[4] + attr + ": " + fieldObj[attr];
             }
             else if (attr === "defaultValue") {
                 let defaultVal = fieldObj.defaultValue;
@@ -345,7 +349,7 @@ class AutoGenerator {
                 // : val_text;
                 // don't prepend N for MSSQL when building models...
                 // defaultVal = _.trimStart(defaultVal, 'N');
-                str += space[3] + attr + ": " + val_text;
+                str += space[4] + attr + ": " + val_text;
             }
             else if (attr === "comment" && (!fieldObj[attr] || this.dialect.name === "mssql")) {
                 return true;
@@ -356,20 +360,20 @@ class AutoGenerator {
                     val = fieldObj[attr];
                     val = lodash_1.default.isString(val) ? quoteWrapper + this.escapeSpecial(val) + quoteWrapper : val;
                 }
-                str += space[3] + attr + ": " + val;
+                str += space[4] + attr + ": " + val;
             }
             str += ",\n";
         });
         if (unique) {
             const uniq = lodash_1.default.isString(unique) ? quoteWrapper + unique.replace(/\"/g, '\\"') + quoteWrapper : unique;
-            str += space[3] + "unique: " + uniq + ",\n";
+            str += space[4] + "unique: " + uniq + ",\n";
         }
         if (field !== fieldName) {
-            str += space[3] + "field: '" + field + "',\n";
+            str += space[4] + "field: '" + field + "',\n";
         }
         // removes the last `,` within the attribute options
         str = str.trim().replace(/,+$/, '') + "\n";
-        str = space[2] + str + space[2] + "},\n";
+        str = space[3] + str + space[3] + "},\n";
         return str;
     }
     addIndexes(table) {
@@ -377,26 +381,26 @@ class AutoGenerator {
         const space = this.space;
         let str = "";
         if (indexes && indexes.length) {
-            str += space[2] + "indexes: [\n";
+            str += space[3] + "indexes: [\n";
             indexes.forEach(idx => {
-                str += space[3] + "{\n";
+                str += space[4] + "{\n";
                 if (idx.name) {
-                    str += space[4] + `name: "${idx.name}",\n`;
+                    str += space[5] + `name: "${idx.name}",\n`;
                 }
                 if (idx.unique) {
-                    str += space[4] + "unique: true,\n";
+                    str += space[5] + "unique: true,\n";
                 }
                 if (idx.type) {
                     if (['UNIQUE', 'FULLTEXT', 'SPATIAL'].includes(idx.type)) {
-                        str += space[4] + `type: "${idx.type}",\n`;
+                        str += space[5] + `type: "${idx.type}",\n`;
                     }
                     else {
-                        str += space[4] + `using: "${idx.type}",\n`;
+                        str += space[5] + `using: "${idx.type}",\n`;
                     }
                 }
-                str += space[4] + `fields: [\n`;
+                str += space[5] + `fields: [\n`;
                 idx.fields.forEach(ff => {
-                    str += space[5] + `{ name: "${ff.attribute}"`;
+                    str += space[6] + `{ name: "${ff.attribute}"`;
                     if (ff.collate) {
                         str += `, collate: "${ff.collate}"`;
                     }
@@ -408,10 +412,10 @@ class AutoGenerator {
                     }
                     str += " },\n";
                 });
-                str += space[4] + "]\n";
-                str += space[3] + "},\n";
+                str += space[5] + "]\n";
+                str += space[4] + "},\n";
             });
-            str += space[2] + "],\n";
+            str += space[3] + "],\n";
         }
         return str;
     }
@@ -582,10 +586,10 @@ class AutoGenerator {
                     // current table is a child that belongsTo parent
                     const pparent = lodash_1.default.upperFirst(rel.parentProp);
                     str += `${sp}// ${rel.childModel} belongsTo ${rel.parentModel} via ${rel.parentId}\n`;
-                    str += `${sp}${rel.parentProp}!: ${rel.parentModel};\n`;
-                    str += `${sp}get${pparent}!: Sequelize.BelongsToGetAssociationMixin<${rel.parentModel}>;\n`;
-                    str += `${sp}set${pparent}!: Sequelize.BelongsToSetAssociationMixin<${rel.parentModel}, ${rel.parentModel}Id>;\n`;
-                    str += `${sp}create${pparent}!: Sequelize.BelongsToCreateAssociationMixin<${rel.parentModel}>;\n`;
+                    str += `${sp}declare ${rel.parentProp}: ${rel.parentModel};\n`;
+                    str += `${sp}declare get${pparent}: Sequelize.BelongsToGetAssociationMixin<${rel.parentModel}>;\n`;
+                    str += `${sp}declare set${pparent}: Sequelize.BelongsToSetAssociationMixin<${rel.parentModel}, ${rel.parentModel}Id>;\n`;
+                    str += `${sp}declare create${pparent}: Sequelize.BelongsToCreateAssociationMixin<${rel.parentModel}>;\n`;
                     (_a = needed[_d = rel.parentTable]) !== null && _a !== void 0 ? _a : (needed[_d] = new Set());
                     needed[rel.parentTable].add(rel.parentModel);
                     needed[rel.parentTable].add(rel.parentModel + 'Id');
@@ -596,10 +600,10 @@ class AutoGenerator {
                     if (rel.isOne) {
                         // const hasModelSingular = singularize(hasModel);
                         str += `${sp}// ${rel.parentModel} hasOne ${rel.childModel} via ${rel.parentId}\n`;
-                        str += `${sp}${rel.childProp}!: ${rel.childModel};\n`;
-                        str += `${sp}get${pchild}!: Sequelize.HasOneGetAssociationMixin<${rel.childModel}>;\n`;
-                        str += `${sp}set${pchild}!: Sequelize.HasOneSetAssociationMixin<${rel.childModel}, ${rel.childModel}Id>;\n`;
-                        str += `${sp}create${pchild}!: Sequelize.HasOneCreateAssociationMixin<${rel.childModel}>;\n`;
+                        str += `${sp}declare ${rel.childProp}: ${rel.childModel};\n`;
+                        str += `${sp}declare get${pchild}: Sequelize.HasOneGetAssociationMixin<${rel.childModel}>;\n`;
+                        str += `${sp}declare set${pchild}: Sequelize.HasOneSetAssociationMixin<${rel.childModel}, ${rel.childModel}Id>;\n`;
+                        str += `${sp}declare create${pchild}: Sequelize.HasOneCreateAssociationMixin<${rel.childModel}>;\n`;
                         needed[rel.childTable].add(rel.childModel);
                         needed[rel.childTable].add(`${rel.childModel}Id`);
                         needed[rel.childTable].add(`${rel.childModel}CreationAttributes`);
@@ -610,17 +614,17 @@ class AutoGenerator {
                         const lur = (0, types_1.pluralize)(rel.childProp);
                         const plur = lodash_1.default.upperFirst(lur);
                         str += `${sp}// ${rel.parentModel} hasMany ${rel.childModel} via ${rel.parentId}\n`;
-                        str += `${sp}${lur}!: ${rel.childModel}[];\n`;
-                        str += `${sp}get${plur}!: Sequelize.HasManyGetAssociationsMixin<${hasModel}>;\n`;
-                        str += `${sp}set${plur}!: Sequelize.HasManySetAssociationsMixin<${hasModel}, ${hasModel}Id>;\n`;
-                        str += `${sp}add${sing}!: Sequelize.HasManyAddAssociationMixin<${hasModel}, ${hasModel}Id>;\n`;
-                        str += `${sp}add${plur}!: Sequelize.HasManyAddAssociationsMixin<${hasModel}, ${hasModel}Id>;\n`;
-                        str += `${sp}create${sing}!: Sequelize.HasManyCreateAssociationMixin<${hasModel}>;\n`;
-                        str += `${sp}remove${sing}!: Sequelize.HasManyRemoveAssociationMixin<${hasModel}, ${hasModel}Id>;\n`;
-                        str += `${sp}remove${plur}!: Sequelize.HasManyRemoveAssociationsMixin<${hasModel}, ${hasModel}Id>;\n`;
-                        str += `${sp}has${sing}!: Sequelize.HasManyHasAssociationMixin<${hasModel}, ${hasModel}Id>;\n`;
-                        str += `${sp}has${plur}!: Sequelize.HasManyHasAssociationsMixin<${hasModel}, ${hasModel}Id>;\n`;
-                        str += `${sp}count${plur}!: Sequelize.HasManyCountAssociationsMixin;\n`;
+                        str += `${sp}declare ${lur}: ${rel.childModel}[];\n`;
+                        str += `${sp}declare get${plur}: Sequelize.HasManyGetAssociationsMixin<${hasModel}>;\n`;
+                        str += `${sp}declare set${plur}: Sequelize.HasManySetAssociationsMixin<${hasModel}, ${hasModel}Id>;\n`;
+                        str += `${sp}declare add${sing}: Sequelize.HasManyAddAssociationMixin<${hasModel}, ${hasModel}Id>;\n`;
+                        str += `${sp}declare add${plur}: Sequelize.HasManyAddAssociationsMixin<${hasModel}, ${hasModel}Id>;\n`;
+                        str += `${sp}declare create${sing}: Sequelize.HasManyCreateAssociationMixin<${hasModel}>;\n`;
+                        str += `${sp}declare remove${sing}: Sequelize.HasManyRemoveAssociationMixin<${hasModel}, ${hasModel}Id>;\n`;
+                        str += `${sp}declare remove${plur}: Sequelize.HasManyRemoveAssociationsMixin<${hasModel}, ${hasModel}Id>;\n`;
+                        str += `${sp}declare has${sing}: Sequelize.HasManyHasAssociationMixin<${hasModel}, ${hasModel}Id>;\n`;
+                        str += `${sp}declare has${plur}: Sequelize.HasManyHasAssociationsMixin<${hasModel}, ${hasModel}Id>;\n`;
+                        str += `${sp}declare count${plur}: Sequelize.HasManyCountAssociationsMixin;\n`;
                         needed[rel.childTable].add(hasModel);
                         needed[rel.childTable].add(`${hasModel}Id`);
                     }
@@ -638,17 +642,17 @@ class AutoGenerator {
                     const otherModelPlural = lodash_1.default.upperFirst(lotherModelPlural);
                     const otherTable = isParent ? rel.childTable : rel.parentTable;
                     str += `${sp}// ${thisModel} belongsToMany ${otherModel} via ${rel.parentId} and ${rel.childId}\n`;
-                    str += `${sp}${lotherModelPlural}!: ${otherModel}[];\n`;
-                    str += `${sp}get${otherModelPlural}!: Sequelize.BelongsToManyGetAssociationsMixin<${otherModel}>;\n`;
-                    str += `${sp}set${otherModelPlural}!: Sequelize.BelongsToManySetAssociationsMixin<${otherModel}, ${otherModel}Id>;\n`;
-                    str += `${sp}add${otherModelSingular}!: Sequelize.BelongsToManyAddAssociationMixin<${otherModel}, ${otherModel}Id>;\n`;
-                    str += `${sp}add${otherModelPlural}!: Sequelize.BelongsToManyAddAssociationsMixin<${otherModel}, ${otherModel}Id>;\n`;
-                    str += `${sp}create${otherModelSingular}!: Sequelize.BelongsToManyCreateAssociationMixin<${otherModel}>;\n`;
-                    str += `${sp}remove${otherModelSingular}!: Sequelize.BelongsToManyRemoveAssociationMixin<${otherModel}, ${otherModel}Id>;\n`;
-                    str += `${sp}remove${otherModelPlural}!: Sequelize.BelongsToManyRemoveAssociationsMixin<${otherModel}, ${otherModel}Id>;\n`;
-                    str += `${sp}has${otherModelSingular}!: Sequelize.BelongsToManyHasAssociationMixin<${otherModel}, ${otherModel}Id>;\n`;
-                    str += `${sp}has${otherModelPlural}!: Sequelize.BelongsToManyHasAssociationsMixin<${otherModel}, ${otherModel}Id>;\n`;
-                    str += `${sp}count${otherModelPlural}!: Sequelize.BelongsToManyCountAssociationsMixin;\n`;
+                    str += `${sp}declare ${lotherModelPlural}: ${otherModel}[];\n`;
+                    str += `${sp}declare get${otherModelPlural}: Sequelize.BelongsToManyGetAssociationsMixin<${otherModel}>;\n`;
+                    str += `${sp}declare set${otherModelPlural}: Sequelize.BelongsToManySetAssociationsMixin<${otherModel}, ${otherModel}Id>;\n`;
+                    str += `${sp}declare add${otherModelSingular}: Sequelize.BelongsToManyAddAssociationMixin<${otherModel}, ${otherModel}Id>;\n`;
+                    str += `${sp}declare add${otherModelPlural}: Sequelize.BelongsToManyAddAssociationsMixin<${otherModel}, ${otherModel}Id>;\n`;
+                    str += `${sp}declare create${otherModelSingular}: Sequelize.BelongsToManyCreateAssociationMixin<${otherModel}>;\n`;
+                    str += `${sp}declare remove${otherModelSingular}: Sequelize.BelongsToManyRemoveAssociationMixin<${otherModel}, ${otherModel}Id>;\n`;
+                    str += `${sp}declare remove${otherModelPlural}: Sequelize.BelongsToManyRemoveAssociationsMixin<${otherModel}, ${otherModel}Id>;\n`;
+                    str += `${sp}declare has${otherModelSingular}: Sequelize.BelongsToManyHasAssociationMixin<${otherModel}, ${otherModel}Id>;\n`;
+                    str += `${sp}declare has${otherModelPlural}: Sequelize.BelongsToManyHasAssociationsMixin<${otherModel}, ${otherModel}Id>;\n`;
+                    str += `${sp}declare count${otherModelPlural}: Sequelize.BelongsToManyCountAssociationsMixin;\n`;
                     (_c = needed[otherTable]) !== null && _c !== void 0 ? _c : (needed[otherTable] = new Set());
                     needed[otherTable].add(otherModel);
                     needed[otherTable].add(`${otherModel}Id`);
@@ -663,13 +667,13 @@ class AutoGenerator {
     addTypeScriptFields(table, isInterface) {
         const sp = this.space[1];
         const fields = lodash_1.default.keys(this.tables[table]);
-        const notNull = isInterface ? '' : '!';
+        // const notNull = isInterface ? '' : '!';
         let str = '';
         fields.forEach(field => {
             if (!this.options.skipFields || !this.options.skipFields.includes(field)) {
                 const name = this.quoteName((0, types_1.recase)(this.options.caseProp, field));
                 const isOptional = this.getTypeScriptFieldOptional(table, field);
-                str += `${sp}${name}${isOptional ? '?' : notNull}: ${this.getTypeScriptType(table, field)};\n`;
+                str += `${sp}${isInterface ? '' : 'declare '}${name}: ${this.getTypeScriptType(table, field)}${isOptional ? ' | null' : ''};\n`;
             }
         });
         return str;
diff --git a/node_modules/sequelize-auto/lib/types.js b/node_modules/sequelize-auto/lib/types.js
index 212f4e9..5424910 100644
--- a/node_modules/sequelize-auto/lib/types.js
+++ b/node_modules/sequelize-auto/lib/types.js
@@ -88,7 +88,7 @@ function makeIndent(spaces, indent) {
         sp += (spaces === true ? ' ' : "\t");
     }
     let space = [];
-    for (let i = 0; i < 6; i++) {
+    for (let i = 0; i < 10; i++) {
         space[i] = sp.repeat(i);
     }
     return space;
